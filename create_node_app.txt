For a Node.js, Express.js, or React project:

-----
Bash Profile

- Add the following statement to your bash profile so your program will find your node packages in node_modules:
		export PATH=$PATH:./node_modules/.bin

		* NOTE: you MUST restart your Terminal session for this change to be effective

- To view your path and verify it's configured properly - echo $PATH

-----
Project Directory (not if React)

- mkdir xxxxxxx (where ‘xxxxx’ is your project directory - this would likely be done as the result of a git clone command)

-----
package.json

- npm init (creates the package.json which stores all of the information and package requirements for your project)

-----
Install Packages (not if React)

node_modules: A node_modules directory will automatically be created for you when you do your first 'npm install <package>' (where <package> is the name of the package being installed)

- npm install express —-save (if Express.js is being used)

- npm install prompt-promise —-save (used to prompt for user input)

- npm install axios (Promise based HTTP client for the browser and node.js.  This is an alternative to using 'npm install request' and 'npm install request-promise'.  It is preferred because you can use it on the front-end (browser) and the back-end (node.js).)

- npm install nodemon —-save-dev (a utility that will monitor for any changes in your source and automatically restart your server - goes into ./node_modules/.bin/nodemon where ’.’ is current directory)

- npm install pg-promise —-save (if accessing a database)

- npm install bluebird —-save (adds the .finally statement when using a Promise…see below for example:)
		Var Promise = require(“bluebird”);  (this will give you access to the ‘finally’ statement)

- npm install hbs —-save  (Express.js view engine for handlebars.js - see http://handlebarsjs.com/ - handlebars is used to build templates)

- npm install body-parser —-save  (Parse incoming request bodies in a middleware before your handlers)

- npm install sharp --save  (the typical use for this high speed Node.js module is to convert large images in common formats to smaller, web=friendly JPEG, PNG, and WebP images of varying dimensions)

- npm install morgan --save  (a nice logger - this is recommended to help monitor/debug your app)

- npm install express-session  (middleware session - used to build login functionality to a website)

If you need to store a password:
	- npm install pbkdf2 --save  (This library provides the functionality of PBKDF2 with the ability to use any supported hashing algorithm returned from crypto.getHashes())
	- npm install cypto --save  (according to npm this has been deprecated and is a built-in module to Node.js so this may not be necessary)

	OR

- npm install pbkdf2-helpers --save (Helper functions for implementing PBKDF2 password storage.)


If using WebSockets:
- npm install socket.io --save

If using Sequelize to access your database:
- npm install --save sequelize
- npm install --save sequelize-cli
- npm install --save pg pg-hstore

If using a database other than Postgres:
	npm install --save mysql2
	npm install --save sqlite3
	npm install --save tedious // MSSQL

If using Sequilize:
- sequelize init

* NOTE - these may already be installed as a result of being dependencies of pg-promise

If using Less CSS:
- npm install less
- npm install watch-run

-----
Project structure (not if React)

- Static Files (do this to use static files using Express JS) - make a directory called ‘public’ in your project directory.  The following code MUST be at the top of your app!!!
		app.use(‘/static’, express.static('public'));

- Make a directory called ‘views’ in your project directory.

- Add the following code to your Express.js pgm to make it use handlebars as your template engine:
		app.set('view engine', 'hbs');

- Store your db models in a 'models' directory (models should be created automatically when you npm install sequilize-cli)

-----
Executing your Node.js program (not if React)

$ nodemon xxxxxxxxxx.js  (where 'xxxxxxxxxx' is your program name)

* NOTE:  Using the 'nodemon' command to invoke a Node.js program is preferred over the 'node' command because it will monitor for any changes in your source and automatically restart your server

-----
If a React app:

- create-react-app xxxxxx (where 'xxxxxx' is your app name) - this will automatically create your project Directory

- cd xxxxxx (where 'xxxxxx' is your project directory)

- Initialize your project directory as a Git repository

- npm install react-tap-event-plugin --save
- npm install material-ui --save

- You can now start coding your React app

- enter 'npm start' from Terminal to run your app

Start by modifying the 'App.js' that is automatically provided.  Add your components here.

To create a new component...

	Always start with the import React statement...
	- import React, { Component } from 'react';

	Then define the Class...
	- class HelloWorld extends Component {
		constructor (props) {
			super(props);

			this.state = {
				...add your state variables heres
				date: new Date(),
				name: "Greg"
			}
		}
	}

	Then add your 'render' function...
	- render () {
			...put your code here
	}

	To make your component available to be imported you need the export statement...
	- export default HelloMessage; (where 'HelloMessage' is the name of the Class)

!!!  React won’t know to re-render anything until you call the ‘setState’ function!
- this.setState({people: this.state.people});

To use CSS, add an import statement to your component:
- import './Hello.css'

-----
App structure - Hello World app:

// code below imports express and makes an app
var express = require('express');
var app = express();

// code below invokes the get function (there are no classes) for the ‘/‘ browser request
app.get('/', function (request, response) {
  response.send('Hello World!');
});

// listening on port 8000, callback function is invoked with no arguments
app.listen(8000, function () {
  console.log('Listening on port 8000');
});

To start this app:  $ nodemon app.js


-----
Add more handlers (called ‘views’ in Express.js)

app.get('/about', function (request, response) {
  response.send('About Me');
});

app.get('/projects', function (request, response) {
  response.send('Projects');
});


-----
URL Parameters (getting a URL and extracting pieces of it)

//  Using this code you can pull out pieces of the URL so you can you use it in your program to do things like retrieve info from your DB
app.get('/post/:slug', function (request, response) {
  var slug = request.params.slug;
  response.send('Post About: ' + slug);
});


-----
URL Query Parameters (e.g a query parameter would be something like ‘?fname=Greg’ at the end of the URL)

app.get('/hello', function (request, response) {
  var name = request.query.name || 'World';
  response.send('Hello ' + name);
});


-----
Your HTML Form

views/form.hbs:

<form action="/submit" method="POST">
  <label>Name</label>
  <input type="text" name="name">
  <br><br>
  <button type="submit">Submit</button>
</form>

in your app.js:

app.get('/form', function(req, resp) {
  response.render('form.hbs');
});


-----
POST Parameters

npm install body-parser

// The following code is the equivalent of an import statement
const body_parser = require('body-parser');

// The following code sets your program up to use the body parser
app.use(body_parser.urlencoded({extended: false}));

app.post('/submit', function (request, response) {
  console.log(request.body);
  response.send('OK');
});


-----
Redirects

To redirect to another page:
	response.redirect('/some-where-else');


-----
Referencing fields from an HTML form

Request.body.xxxxxx (where ‘xxxxx’ is what you put in your HTML form using the ‘name=‘ on an ‘<input>’ element
- Example:  <input type=text name=“name”>


-----
Error Handling

You get 3 things back:
1. Request - named as ‘request’ or more commonly ‘req’
2. Response - named as ‘response’ or more commonly ‘res’
3. Next - this is so the page doesn't hang

app.get('/search', function(req, resp, next) {
// ‘term’ comes from the URL
let term = req.query.searchTerm;
//  Query statement
  let query = "SELECT * FROM restaurant WHERE \
  restaurant.name ILIKE '%$1#%'";
  db.any(query, term)
    .then(function(resultsArray) {
     	 resp.render('search_results.hbs', {
        		results: resultsArray
      });
    })
    .catch(next); — ALWAYS DO THIS (always code your query’s like this group of code)
});
